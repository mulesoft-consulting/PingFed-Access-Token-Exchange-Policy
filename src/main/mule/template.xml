<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:http-policy="http://www.mulesoft.org/schema/mule/http-policy"
      xmlns:http-transform="http://www.mulesoft.org/schema/mule/http-policy-transform"
      xmlns:authentication="http://www.mulesoft.org/schema/mule/authentication"
      xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd 
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/http-policy http://www.mulesoft.org/schema/mule/http-policy/current/mule-http-policy.xsd
               http://www.mulesoft.org/schema/mule/http-policy-transform http://www.mulesoft.org/schema/mule/http-policy-transform/current/mule-http-policy-transform.xsd
               http://www.mulesoft.org/schema/mule/authentication http://www.mulesoft.org/schema/mule/authentication/current/mule-authentication.xsd">

	
	<validation:config name="Validation_Config"/>
    <http-policy:proxy name="{{{policyId}}}-custom-policy">
        <http-policy:source propagateMessageTransformations="true">
        <try>
			<logger message="Beginning of the Ping access token exchange - {{{policyId}}} custom policy "/>
            <!-- Retrieve token -->
            <choice>
				<when expression='#["{{{subjectTokenType}}}" == "urn:ietf:params:oauth:token-type:saml2"]'>
					<logger level="INFO"  message='#["Subject token type is SAML"]'/>
					<ee:transform>
						<ee:variables>
							<ee:set-variable variableName="token" ><![CDATA[%dw 2.0
								output text/plain
								
								import dw::Crypto
								import toBase64 from dw::core::Binaries
								
								ns ns0 http://schemas.xmlsoap.org/soap/envelope/
								ns ns1 http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd
								ns ns2 http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd
								ns saml urn:oasis:names:tc:SAML:2.0:assertion
								
								var assertion= {
								    saml#Assertion @((payload.ns0#Envelope.ns0#Header.ns1#Security.saml#Assertion.@)): payload.ns0#Envelope.ns0#Header.ns1#Security.saml#Assertion
								}
								
								---
								if (assertion.saml#Assertion !=null) toBase64(write(assertion,"application/xml", {"writeDeclaration":false,"indent":false}) as Binary) else ""]]>
							</ee:set-variable>
						</ee:variables>
					</ee:transform>
					
					<!--  reject the request if saml assertion is not present in request -->	
					<validation:validate-size value="#[vars.token]" min="1" message='#["SAML assertion is missing or incorrect"]'/>
				
					<!--  log the incoming ws security header in debug mode -->
					{{#if debug}}
						<ee:transform>
							<ee:variables>						
								<ee:set-variable variableName="wsSecHeader"><![CDATA[
									%dw 2.0
									output application/xml indent=false
									ns soap http://schemas.xmlsoap.org/soap/envelope/
									ns wsse http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd
									---
									wsse#Security @((payload.soap#Envelope.soap#Header.wsse#Security.@)): payload.soap#Envelope.soap#Header.wsse#Security
									]]>
								</ee:set-variable>
							</ee:variables>		
						</ee:transform>
						<logger message="#[vars.wsSecHeader]" />
					{{/if}}					
				</when>
				<otherwise>
					<logger message="Subject token type is not SAML"/>
					
					<!--  reject the request if Authorization header is not present in request -->	
					<validation:is-not-null config-ref="Validation_Config" value='#[attributes.headers["Authorization"]]' message="Bearer token is expected in Authorization header"/>
					
					<!-- Extract the bearer token from Authorization header -->
					<ee:transform>
						<ee:variables>
							<ee:set-variable variableName="token"><![CDATA[%dw 2.0
									output application/java
									---
									(using (token = (attributes.headers['Authorization'] as String) splitBy  ' '){
									 token: token[1]
									}).token]]>
							</ee:set-variable>
						</ee:variables>
					</ee:transform>
					
					<!--  log the incoming Authorization header in debug mode -->
					{{#if debug}}						
						<logger message="#[vars.token]" />
					{{/if}}	
				</otherwise>
			</choice>			 
		    <ee:transform>
				<ee:variables>
					<ee:set-variable variableName="pingRequest">
						<![CDATA[%dw 2.0
							output application/x-www-form-urlencoded
												
							---
							{
								"grant_type" : "urn:ietf:params:oauth:grant-type:token-exchange",
								"subject_token": vars.token,
								"subject_token_type": "{{{subjectTokenType}}}",
								"resource": "{{{resource}}}",
								"requested_token_type": "{{{requestedTokenType}}}",
								"scope": "{{{scope}}}",
								"audience": "{{{audience}}}",
								"actor_token": "{{{actorToken}}}",
								"actor_token_type":"{{{actorTokenType}}}",
								"client_id":"{{{clientId}}}",
								"client_secret":"{{{clientSecret}}}"						
								
							}]]>
					</ee:set-variable>					
				</ee:variables>
			</ee:transform>
			{{#if debug}}
		    <logger level="DEBUG" message="#[vars.pingRequest]"/>  
		    {{/if}}
		    <!-- call ping token service -->			
			<http:request method="POST" url="{{{pingURL}}}" target="pingResponse" targetValue='#[payload]'>
				<http:body ><![CDATA[#[vars.pingRequest]]]></http:body>
				<http:response-validator >
					<http:success-status-code-validator values="200..599" />
				</http:response-validator>
			</http:request>		  
			{{#if debug}}
		    <logger level="DEBUG" message="#[vars.pingResponse]"/>  
		    {{/if}} 
		    <choice>
				<when expression='#[(sizeOf(vars.pingResponse) &gt; 0) and (vars.pingResponse."access_token" !=null)]'>
					<logger level="INFO" message="#[payload]"/>
					<set-variable value='#[vars.pingResponse."access_token"]' variableName="token"/>
					<authentication:add-properties newProperties="#[{'accessToken': vars.token}]"/>
					<!-- Remove WS Security Header from request XML -->
					<!--  supported only in Mule runtime 4.3.0 -->
					{{#if removeToken}}
						<choice>
							<when expression='#["{{{subjectTokenType}}}" == "urn:ietf:params:oauth:token-type:saml2"]'>
								<ee:transform>
									<ee:message>
										<ee:set-payload>
										<![CDATA[%dw 2.0
											output application/xml inlineCloseOn="empty"
											---
											
											payload update {
											case a at .Envelope.Header -> a - "Security"
											}]]>
										</ee:set-payload>
									</ee:message>
								</ee:transform>
								<logger message="#[payload]"/>
								<logger message="Removed WS Security Header in incoming request XML"/>
							</when>
							<otherwise>
								<http-transform:remove-headers>
                    				<http-transform:header-names>#[['Authorization']]</http-transform:header-names>
                				</http-transform:remove-headers>
								<logger message="Removed Authorization Header in incoming Request"/>								
							</otherwise>
						</choice>						
					{{/if}}
				</when>
				<when expression='#[(sizeOf(vars.pingResponse) &gt; 0) and ((vars.pingResponse."error_description" !=null) and (vars.pingResponse."access_token" == null))]'>
					<logger level="INFO" message='#["Error Flow"]'/>
					<logger level="ERROR" message="#[vars.pingResponse]"/> 
					<raise-error type="MULE:CLIENT_SECURITY" description='#[vars.pingResponse."error_description"]'/>
				</when>
				<otherwise>					
					<logger level="ERROR" message="#[vars.pingResponse]"/> 
					<raise-error type="MULE:CLIENT_SECURITY" description='"internal error occured while authenticating the request with IDP"'/>
				</otherwise>
			</choice>					 
			<logger message="end of the ping access token exchange {{{policyId}}} custom policy"/>
            <http-policy:execute-next/>			
            <error-handler>
						<on-error-continue enableNotifications="true" logException="true" type="MULE:CLIENT_SECURITY, VALIDATION:INVALID_SIZE, VALIDATION:NULL">
							 <choice>
								<when expression='#["{{{subjectTokenType}}}" == "urn:ietf:params:oauth:token-type:saml2"]'>
									<http-transform:set-response statusCode="500">
										<http-transform:body>
												#[output application/xml
												
												ns soap http://schemas.xmlsoap.org/soap/envelope/
												ns wsse http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd
												
												---
												{
													soap#Envelope:{
														soap#Body:{
															soap#Fault:{
																faultcode @('xmlns:wsse':'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'): "wsse:InvalidSecurityToken",
																faultstring: error.description
																}
														}
													}
												}]
											</http-transform:body>
									</http-transform:set-response>
								</when>
								<otherwise>
									<http-transform:set-response statusCode="401">
										<http-transform:body>
											#[ output application/json
											---
											{"error": "$(error.description)"}
											]
										</http-transform:body>
									</http-transform:set-response>
								</otherwise>
							</choice>
							
						</on-error-continue>
						<on-error-continue enableNotifications="true" logException="true" when='#[error.errorType.namespace == "HTTP"]'>							
							<choice>
								<when expression='#["{{{subjectTokenType}}}" == "urn:ietf:params:oauth:token-type:saml2"]'>
									<http-transform:set-response statusCode="500">
										<http-transform:body>
												#[output application/xml
										
										ns soap http://schemas.xmlsoap.org/soap/envelope/
										
										---
										{
											soap#Envelope:{
												soap#Body:{
													soap#Fault:{
														faultcode: "soap:Server",
														faultstring: "Internal error occured while authenticating the request, please contact system administrator"
														}
												}
											}
										}]
											</http-transform:body>
									</http-transform:set-response>
								</when>
								<otherwise>
									<http-transform:set-response statusCode="500">
										<http-transform:body>
											#[ output application/json
											---
											{"error": "Internal error occured while authenticating the request, please contact system administrator"}
											]
										</http-transform:body>
									</http-transform:set-response>
								</otherwise>
							</choice>
						</on-error-continue>								
			</error-handler>
			</try>
        </http-policy:source>
    </http-policy:proxy>
</mule>
